#!/bin/bash

# -----------------------------------------------------------------------
# iOSOpenDev -- iOS Open Development (http://www.iOSOpenDev.com)
# Copyright (C) 2012-2013 Spencer W.S. James (Kokoabim) <kokoabim@me.com>
# -----------------------------------------------------------------------
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# -----------------------------------------------------------------------
# iOSOpenDev is an independent project and has not been authorized, sponsored, or otherwise approved by Apple Inc.
# IOS is a registered trademark of Cisco and is used under license by Apple Inc.
# Xcode is a registered trademark of Apple Inc.
# -----------------------------------------------------------------------

export setCmd="set -eo pipefail"
$setCmd

# path #
export PATH=/opt/iOSOpenDev/bin:/usr/local/bin:/usr/bin:/usr/sbin:/bin:/sbin:$PATH

# script #

export scriptName="${0##*/}"
export scriptVer="1.3"

export iOSOpenDevPath="/opt/iOSOpenDev"
export backupFileExt=".iOSOpenDev"

export userName="${SUDO_USER-$USER}"
export userGroup=`id -g $userName`
export userHome=`eval echo ~$userName`
export bashProfileFiles=("$userHome/.bash_profile" "$userHome/.bashrc" "$userHome/.zshrc" "$userHome/.bash_login" "$userHome/.profile")

export tempDirsFile="`mktemp -d -t $scriptName`/tempdirs"
touch "$tempDirsFile"

unset LANG

# panic and cleanup #

function cleanup()
{
	local exitCode=$?
	set +e
	trap - $signals
	removeTempData
	exit $exitCode
}
function panic()
{
	local exitCode=$1
	set +e
	shift
	[[ "$@" == "" ]] || echo "$@" >&2
	exit $exitCode
}
export signals="0 1 2 3 15"
trap cleanup $signals

function removeTempData()
{
	local tempDirs
	if [[ -f "$tempDirsFile" ]]; then
		tempDirs=(`cat "$tempDirsFile"`)
		for td in "${tempDirs[@]}"; do
			rm -rf "$td" || true
		done
		rm -rf "`dirname $tempDirsFile`" || true
	fi
}
function getTempDir()
{
	$setCmd
	local tempDir	
	tempDir=`mktemp -d -t $scriptName` || \
		panic $? "Failed to create temporary directory"
	echo "$tempDir" >> "$tempDirsFile" || \
		panic $? "Failed to echo into $tempDirsFile"
	echo "$tempDir"
}

# common functions #

function copyFile()
{
	cp -f "$1" "$2" || \
		panic $? "Failed to copy file $1 to $2"
}

# sdk argument functions #

function getSdkProperty()
{
	$setCmd

	local sdk="$1"
	local propertyName="$2"

	propertyValue=`xcodebuild -version -sdk $sdk $propertyName` || \
		panic $? "Failed to get $sdk SDK property $propertyName"

	[[ $propertyValue != "" ]] || \
		panic 1 "Value of $sdk SDK property $propertyName cannot be empty"

	# return #
	echo "$propertyValue"
}

function getPlatformName()
{
	$setCmd

	local sdk="$1"
	local iosSdkPlatformPath
	local platformDir
	local platformName
	
	iosSdkPlatformPath=`getSdkProperty $sdk PlatformPath`	
	platformDir="${iosSdkPlatformPath##*/}"
	platformName="${platformDir%.*}"
	
	# return #
	echo "$platformName"
}

function restoreFile()
{
	local filePath="$1"
	local backedUpFilePath="${filePath}${backupFileExt}"
	
	if [[ -f "$backedUpFilePath" ]]; then
		copyFile "$backedUpFilePath" "$filePath"	
		rm -f "$backedUpFilePath"
	fi
}

function removeSdkPrivateHeaderSymlinks()
{
	local sdk="$1"
	local iosSdkPath
	local privateFWsDir
	local privateFwBinaries
	local fullPath
	local shortPath
	local sourcePath
	local targetPath
	
	iosSdkPath=`getSdkProperty $sdk Path`
	
	[[ -d "$iosSdkPath" ]] || \
		panic 1 "SDK directory not found: $iosSdkPath"
		
	privateFWsDir="$iosSdkPath/System/Library/PrivateFrameworks"
	
	[[ -d "$privateFWsDir" ]] || \
		panic 1 "PrivateFramework directory not found: $privateFWsDir"

	privateFwBinaries=($(find "$privateFWsDir" -type f -perm +111 -ipath "*.framework/*"))
	
	for f in "${privateFwBinaries[@]}"; do
		fullPath=`dirname "$f"`
		targetPath="${fullPath}/Headers"

		if [[ -e "$targetPath" ]] && [[ ! -L "$targetPath" ]]; then
			echo "Skipping since not a symlink: $targetPath"
		elif [[ -L "$targetPath" ]]; then
			if [[ -f "$targetPath" ]]; then
				echo "Skipping since symlinked to file: $targetPath"
			elif [[ -d "$targetPath" ]] || [[ ! -e "$targetPath" ]]; then
				rm -f "$targetPath" || \
					panic $? "Failed to remove symlink: $targetPath"
			else
				echo "Skipping since symlinked to unknown type: $targetPath"
			fi
		fi
	done
}

# script functions #

function requireOptionValue()
{
	[[ "$2" != "" ]] || \
		panic 1 "Missing value for $1 option"
}

function showUsage()
{
	panic 1 \
"$scriptName (v${scriptVer}) -- iOSOpenDev Uninstall
Usages:
   $scriptName base
   $scriptName sdk [-sdk <sdk>] [-d <directory>] [-which]

Arguments:
   base               Uninstall iOSOpenDev base, Xcode templates and private
                      framework header files.

   sdk                Undo modifications made to latest iOS SDK for \"open\"
                      development.

Options:
   -sdk <sdk>         SDK name and, optionally, version as one word to set
                      up. If version is omitted, latest version of named SDK
                      is used. If <sdk> is entirely omitted, latest iOS SDK is
                      used.

   -d <directory>     Set environment variable DEVELOPER_DIR to <directory> to
                      target specific Developer Tools. Use this option when
                      multiple versions of Xcode are installed.

   -which             Print which SDK and Developer Tools directory will be
                      used by default if -sdk <sdk> and -d <directory> are
                      not used.
"
}

# begin script ... #

devToolsDir="`xcode-select --print-path`" || \
	panic $? "Failed to get Xcode developer directory"
	
if [[ ! -d "$DEVELOPER_DIR" ]] && [[ -d "$devToolsDir" ]]; then
	export DEVELOPER_DIR="$devToolsDir"
fi

case "$1" in

base)
	echo "Uninstalling iOSOpenDev base, Xcode templates and framework header files..."
	
	# base

	rm -rf "$iOSOpenDevPath" || \
		panic $? "Failed to remove directory: $iOSOpenDevPath"

	# symlink to templates
	
	userDevDir="$userHome/Library/Developer"
	userTemplatesDir="$userDevDir/Xcode/Templates"
	symlinkPath="$userTemplatesDir/iOSOpenDev"
	
	rm -f "$symlinkPath" || \
		panic $? "Failed to remove file: $symlinkPath"
			
	# bash profile

	for f in "${bashProfileFiles[@]}"; do
		if [[ -f "$f" ]]; then
			userBashProfileFile="$f"
			break
		fi
	done
		
	if [[ $userBashProfileFile != "" ]]; then
		sed -i "" "s/^export iOSOpenDevPath=.*$//g" "$userBashProfileFile"
		sed -i "" "s/^export iOSOpenDevDevice=.*$//g" "$userBashProfileFile"
		sed -i "" "s/^export PATH=.*${iOSOpenDevPath//\//\\/}\\/bin:.*$//g" "$userBashProfileFile"
		sed -i "" "s/^export PATH=.*\$iOSOpenDevPath\\/bin:.*$//g" "$userBashProfileFile"
	fi
;;
sdk)
	shift 1
	
	sdk="iphoneos" # default to latest iphoneos sdk
	printWhich="false"

	while [[ $1 != "" ]]; do
	case "$1" in
		-sdk)
			requireOptionValue "$1" "$2"
			sdk="$2"
			shift 2
		;;
		-d)
			requireOptionValue "$1" "$2"
			export DEVELOPER_DIR="$2"
			shift 2
		;;
		-which)
			printWhich="true"
			shift 1
		;;
		*) panic 1 "Invalid option: $1" ;;
	esac
	done

	iosSdkPath=`getSdkProperty $sdk Path`
	iosSdkPlatformPath=`getSdkProperty $sdk PlatformPath`

	# get sdk platform-name and version
	
	platformName=`getPlatformName "$sdk"`
	sdkVersion=`getSdkProperty "$sdk" "SDKVersion"`

	[[ "$printWhich" == "false" ]] || \
		panic 1 "SDK: ${platformName}${sdkVersion}
Developer Tools: $DEVELOPER_DIR"

	echo "Undoing modifications to $platformName $sdkVersion SDK..."

	# restore SDKSettings.plist
	
	echo "Restoring SDK settings..."
	restoreFile "$iosSdkPath/SDKSettings.plist"

	# remove symlinks to dumped private frameworks header files
	
	echo "Removing symlinks to private frameworks header files..."
	removeSdkPrivateHeaderSymlinks "$sdk"

	# restore xcspec files

	echo "Removing specifications from platform..."
	
	xcspecFileNamePrefix="$platformName"	
	[[ ! $xcspecFileNamePrefix =~ "Simulator" ]] || \
		xcspecFileNamePrefix="iPhone Simulator "

	restoreFile "$iosSdkPlatformPath/Developer/Library/Xcode/Specifications/${xcspecFileNamePrefix}PackageTypes.xcspec"
	restoreFile "$iosSdkPlatformPath/Developer/Library/Xcode/Specifications/${xcspecFileNamePrefix}ProductTypes.xcspec"
;;
*) showUsage ;;
esac

# done #
exit 0