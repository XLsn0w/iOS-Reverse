/**
 * This header is generated by class-dump-z 0.2b.
 *
 * Source: /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

#import <Celestial/Celestial-Structs.h>
#import <Celestial/AVRecorderImpl.h>
#import <Celestial/XXUnknownSuperclass.h>

@class NSMutableDictionary;

@interface AVRecorderAudioQueueImpl : XXUnknownSuperclass <AVRecorderImpl> {
	BOOL _isActive;	// 4 = 0x4
	BOOL _isRecording;	// 5 = 0x5
	BOOL _isWriting;	// 6 = 0x6
	NSMutableDictionary *_attributes;	// 8 = 0x8
	unsigned _fileType;	// 12 = 0xc
	unsigned _audioCodec;	// 16 = 0x10
	long long _maxPCMFramesToRecord;	// 20 = 0x14
	BOOL _haveRecordedMaxPCMFrames;	// 28 = 0x1c
	AudioStreamBasicDescription _recordingFormat;	// 32 = 0x20
	OpaqueAudioFileID *_audioFile;	// 72 = 0x48
	OpaqueAudioQueue *_audioQueue;	// 76 = 0x4c
	unsigned _numDeviceChannels;	// 80 = 0x50
	AudioQueueLevelMeterState *_audioLevels;	// 84 = 0x54
	AudioQueueLevelMeterState *_audioLevelsDB;	// 88 = 0x58
	unsigned _totalBytesRecorded;	// 92 = 0x5c
	unsigned _totalPacketsRecorded;	// 96 = 0x60
	unsigned _totalFramesRecorded;	// 100 = 0x64
	AudioQueueBuffer *_buffers[3];	// 104 = 0x68
	BOOL _bufferUsed[3];	// 116 = 0x74
}
@property(retain) id filePath;	// G=0x20581; S=0x20525; converted property
@property(assign) float micVolume;	// G=0x20b85; S=0x20b71; converted property
@property(readonly, assign) BOOL isActive;	// G=0x20469; converted property
@property(readonly, assign) BOOL isRecording;	// G=0x20481; converted property
- (id)init;	// 0x204e9
- (id)initWithAttributes:(id)attributes;	// 0x212ad
- (void)dealloc;	// 0x2070d
// converted property setter: - (void)setFilePath:(id)path;	// 0x20525
// converted property getter: - (id)filePath;	// 0x20581
- (void)setAttribute:(id)attribute forKey:(id)key;	// 0x205b1
- (id)attributeForKey:(id)key;	// 0x20691
- (BOOL)activate:(id *)activate;	// 0x20f85
- (void)deactivate;	// 0x20eb5
// converted property getter: - (BOOL)isActive;	// 0x20469
- (BOOL)takePhoto;	// 0x20479
- (BOOL)autoFocusAtPoint:(CGPoint)point;	// 0x2047d
- (BOOL)start;	// 0x20ca5
- (void)stop;	// 0x20bad
// converted property getter: - (BOOL)isRecording;	// 0x20481
// converted property getter: - (float)micVolume;	// 0x20b85
// converted property setter: - (void)setMicVolume:(float)volume;	// 0x20b71
- (long long)recordedFileSizeInBytes;	// 0x20491
- (double)recordedDuration;	// 0x204a5
- (unsigned)audioNumDeviceChannels;	// 0x204d9
- (BOOL)audioCurrentAverageVolumeLevels:(float *)levels andPeakVolumeLevels:(float *)levels2 useDB:(BOOL)db;	// 0x20a9d
- (BOOL)audioCurrentAverageVolumeLevels:(float *)levels andPeakVolumeLevels:(float *)levels2;	// 0x206c5
- (BOOL)audioCurrentAverageDecibelLevels:(float *)levels andPeakDecibelLevels:(float *)levels2;	// 0x206e9
- (void)copyEncoderCookieToFile;	// 0x209fd
- (void)haveABuffer:(AudioQueueBuffer *)buffer withTimeStamp:(const AudioTimeStamp *)timeStamp andNumPackets:(unsigned long)packets andPacketDescs:(const AudioStreamPacketDescription *)descs;	// 0x207a9
@end
