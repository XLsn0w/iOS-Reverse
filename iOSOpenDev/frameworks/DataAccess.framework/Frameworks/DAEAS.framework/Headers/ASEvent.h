/**
 * This header is generated by class-dump-z 0.2b.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/Frameworks/DAEAS.framework/DAEAS
 */

#import <DAEAS/ASChangedCollectionLeaf.h>
#import <DAEAS/DADataElement.h>
#import <DAEAS/NSCoding.h>

@class ASRecurrence, NSDate, NSArray, NSNumber, NSString, ASEventUID, ASTimeZone;

@interface ASEvent : ASChangedCollectionLeaf <NSCoding, DADataElement> {
	void *_calRecord;	// 64 = 0x40
	ASTimeZone *_timeZone;	// 68 = 0x44
	NSNumber *_allDayEvent;	// 72 = 0x48
	NSString *_body;	// 76 = 0x4c
	NSNumber *_bodyTruncated;	// 80 = 0x50
	NSNumber *_busyStatus;	// 84 = 0x54
	NSArray *_categories;	// 88 = 0x58
	NSDate *_dTStamp;	// 92 = 0x5c
	NSDate *_endTime;	// 96 = 0x60
	NSString *_location;	// 100 = 0x64
	NSNumber *_meetingStatus;	// 104 = 0x68
	NSString *_organizerEmail;	// 108 = 0x6c
	NSString *_organizerName;	// 112 = 0x70
	NSNumber *_reminderMinsBefore;	// 116 = 0x74
	NSNumber *_sensitivity;	// 120 = 0x78
	NSString *_subject;	// 124 = 0x7c
	NSDate *_startTime;	// 128 = 0x80
	ASEventUID *_eventUID;	// 132 = 0x84
	NSArray *_attendees;	// 136 = 0x88
	NSArray *_attendeesPendingDeletion;	// 140 = 0x8c
	ASRecurrence *_recurrence;	// 144 = 0x90
	NSArray *_exceptions;	// 148 = 0x94
	NSNumber *_responseRequested;	// 152 = 0x98
	int _meetingResponseToEmailAbout;	// 156 = 0x9c
	BOOL _calculateNextStatusAsIfMeetingRequest;	// 160 = 0xa0
	BOOL _shouldUpdateStatus;	// 161 = 0xa1
	BOOL _cachedOrganizerIsSelf;	// 162 = 0xa2
	BOOL _haveCheckedOrganizerEmail;	// 163 = 0xa3
	BOOL _isAttendeeUpdateOnly;	// 164 = 0xa4
	BOOL _isDTStampUpdateOnly;	// 165 = 0xa5
	NSNumber *_responseType;	// 168 = 0xa8
}
@property(retain) NSNumber *responseType;	// G=0x3f235; S=0x3f249; @synthesize=_responseType
@property(retain) NSNumber *responseRequested;	// G=0x3f1fd; S=0x3f211; @synthesize=_responseRequested
@property(retain) NSArray *attendeesPendingDeletion;	// G=0x3f1c5; S=0x3f1d9; @synthesize=_attendeesPendingDeletion
@property(retain) ASEventUID *eventUID;	// G=0x3ca59; S=0x3ca91; @synthesize=_eventUID
@property(retain, nonatomic) NSArray *exceptions;	// G=0x3f1b5; S=0x3ece5; @synthesize=_exceptions
@property(retain, nonatomic) ASRecurrence *recurrence;	// G=0x3f1a5; S=0x3edb9; @synthesize=_recurrence
@property(retain) NSArray *attendees;	// G=0x3f16d; S=0x3f181; @synthesize=_attendees
@property(retain) NSDate *startTime;	// G=0x3f135; S=0x3f149; @synthesize=_startTime
@property(retain) NSString *subject;	// G=0x3f0fd; S=0x3f111; @synthesize=_subject
@property(retain) NSNumber *sensitivity;	// G=0x3f0c5; S=0x3f0d9; @synthesize=_sensitivity
@property(retain) NSNumber *reminderMinsBefore;	// G=0x3f08d; S=0x3f0a1; @synthesize=_reminderMinsBefore
@property(retain) NSString *organizerName;	// G=0x3f055; S=0x3f069; @synthesize=_organizerName
@property(retain) NSString *organizerEmail;	// G=0x3f01d; S=0x3f031; @synthesize=_organizerEmail
@property(retain) NSNumber *meetingStatus;	// G=0x3efe5; S=0x3eff9; @synthesize=_meetingStatus
@property(retain) NSString *location;	// G=0x3efad; S=0x3efc1; @synthesize=_location
@property(retain) NSDate *endTime;	// G=0x3ef75; S=0x3ef89; @synthesize=_endTime
@property(retain) NSDate *dTStamp;	// G=0x3ef3d; S=0x3ef51; @synthesize=_dTStamp
@property(retain) NSArray *categories;	// G=0x3ef05; S=0x3ef19; @synthesize=_categories
@property(retain) NSNumber *busyStatus;	// G=0x3eecd; S=0x3eee1; @synthesize=_busyStatus
@property(retain) NSNumber *bodyTruncated;	// G=0x3ee95; S=0x3eea9; @synthesize=_bodyTruncated
@property(retain, nonatomic) NSString *body;	// G=0x3ee85; S=0x3d459; @synthesize=_body
@property(retain) NSNumber *allDayEvent;	// G=0x3ee4d; S=0x3ee61; @synthesize=_allDayEvent
@property(retain) ASTimeZone *timeZone;	// G=0x3ee15; S=0x3ee29; @synthesize=_timeZone
@property(retain) id exceptionDate;	// G=0x3cb0d; S=0x3cb11; converted property
@property(assign) void *calEvent;	// G=0x3c689; S=0x3c415; converted property
@property(assign) int meetingResponseForEmail;	// G=0x39325; S=0x39355; converted property
+ (void)_setFakeDTStampDateForUnitTests:(id)unitTests;	// 0x3bb09
+ (id)eventWithCalEvent:(void *)calEvent serverID:(id)anId account:(id)account;	// 0x38da5
+ (BOOL)notifyOfUnknownTokens;	// 0x37375
+ (BOOL)frontingBasicTypes;	// 0x37321
+ (BOOL)parsingWithSubItems;	// 0x372cd
+ (BOOL)parsingLeafNode;	// 0x37279
+ (BOOL)acceptsTopLevelLeaves;	// 0x37225
+ (void)setSystemTimeZoneNameForUnitTests:(id)unitTests;	// 0x371e5
// declared property setter: - (void)setResponseType:(id)type;	// 0x3f249
// declared property getter: - (id)responseType;	// 0x3f235
// declared property setter: - (void)setResponseRequested:(id)requested;	// 0x3f211
// declared property getter: - (id)responseRequested;	// 0x3f1fd
// declared property setter: - (void)setAttendeesPendingDeletion:(id)deletion;	// 0x3f1d9
// declared property getter: - (id)attendeesPendingDeletion;	// 0x3f1c5
// declared property getter: - (id)exceptions;	// 0x3f1b5
// declared property getter: - (id)recurrence;	// 0x3f1a5
// declared property setter: - (void)setAttendees:(id)attendees;	// 0x3f181
// declared property getter: - (id)attendees;	// 0x3f16d
// declared property setter: - (void)setStartTime:(id)time;	// 0x3f149
// declared property getter: - (id)startTime;	// 0x3f135
// declared property setter: - (void)setSubject:(id)subject;	// 0x3f111
// declared property getter: - (id)subject;	// 0x3f0fd
// declared property setter: - (void)setSensitivity:(id)sensitivity;	// 0x3f0d9
// declared property getter: - (id)sensitivity;	// 0x3f0c5
// declared property setter: - (void)setReminderMinsBefore:(id)before;	// 0x3f0a1
// declared property getter: - (id)reminderMinsBefore;	// 0x3f08d
// declared property setter: - (void)setOrganizerName:(id)name;	// 0x3f069
// declared property getter: - (id)organizerName;	// 0x3f055
// declared property setter: - (void)setOrganizerEmail:(id)email;	// 0x3f031
// declared property getter: - (id)organizerEmail;	// 0x3f01d
// declared property setter: - (void)setMeetingStatus:(id)status;	// 0x3eff9
// declared property getter: - (id)meetingStatus;	// 0x3efe5
// declared property setter: - (void)setLocation:(id)location;	// 0x3efc1
// declared property getter: - (id)location;	// 0x3efad
// declared property setter: - (void)setEndTime:(id)time;	// 0x3ef89
// declared property getter: - (id)endTime;	// 0x3ef75
// declared property setter: - (void)setDTStamp:(id)stamp;	// 0x3ef51
// declared property getter: - (id)dTStamp;	// 0x3ef3d
// declared property setter: - (void)setCategories:(id)categories;	// 0x3ef19
// declared property getter: - (id)categories;	// 0x3ef05
// declared property setter: - (void)setBusyStatus:(id)status;	// 0x3eee1
// declared property getter: - (id)busyStatus;	// 0x3eecd
// declared property setter: - (void)setBodyTruncated:(id)truncated;	// 0x3eea9
// declared property getter: - (id)bodyTruncated;	// 0x3ee95
// declared property getter: - (id)body;	// 0x3ee85
// declared property setter: - (void)setAllDayEvent:(id)event;	// 0x3ee61
// declared property getter: - (id)allDayEvent;	// 0x3ee4d
// declared property setter: - (void)setTimeZone:(id)zone;	// 0x3ee29
// declared property getter: - (id)timeZone;	// 0x3ee15
// declared property setter: - (void)setRecurrence:(id)recurrence;	// 0x3edb9
// declared property setter: - (void)setExceptions:(id)exceptions;	// 0x3ece5
- (id)eventByMergingInEvent:(id)event account:(id)account;	// 0x3ec9d
- (id)eventByMergingInLosingEvent:(id)losingEvent account:(id)account;	// 0x3e639
- (BOOL)isEqualToEvent:(id)event;	// 0x3dead
- (BOOL)_selfIsMoreCorrectThanOtherEvent:(id)event account:(id)account;	// 0x3dab5
- (void)setShouldUpdateStatus:(BOOL)updateStatus;	// 0x3daa5
- (void)setCalculateNextStatusAsIfMeetingRequest:(BOOL)request;	// 0x3da95
- (BOOL)deleteFromContainer:(void *)container;	// 0x3da7d
- (BOOL)saveServerIDToExistingItem;	// 0x3da65
- (BOOL)loadLocalItemWithAccount:(id)account;	// 0x3da4d
- (void)setLocalItem:(void *)item;	// 0x3da3d
- (BOOL)saveAfterMapWithLocalObject:(void *)localObject toContainer:(void *)container shouldMergeProperties:(BOOL)properties outMergeDidChooseLocalProperties:(BOOL *)outMerge account:(id)account;	// 0x3da09
- (BOOL)saveWithLocalObject:(void *)localObject toContainer:(void *)container shouldMergeProperties:(BOOL)properties outMergeDidChooseLocalProperties:(BOOL *)outMerge account:(id)account;	// 0x3d9d5
- (BOOL)hasOccurrenceInTheFuture;	// 0x3d6e5
- (BOOL)purgeAttendeesPendingDeletion;	// 0x3d545
- (id)fullOrganizerString;	// 0x3d4f9
- (BOOL)cachedOrganizerIsSelfWithAccount:(id)account;	// 0x3d4b1
// declared property setter: - (void)setBody:(id)body;	// 0x3d459
- (void)encodeWithCoder:(id)coder;	// 0x3d02d
- (id)initWithCoder:(id)coder;	// 0x3cb15
// converted property setter: - (void)setExceptionDate:(id)date;	// 0x3cb11
// converted property getter: - (id)exceptionDate;	// 0x3cb0d
// declared property setter: - (void)setEventUID:(id)uid;	// 0x3ca91
// declared property getter: - (id)eventUID;	// 0x3ca59
- (id)uidForCalFramework;	// 0x3ca39
- (id)endDateForCalFramework;	// 0x3c9a1
- (id)startDateForCalFramework;	// 0x3c945
- (void)loadClientIDs;	// 0x3c859
- (BOOL)verifyExternalIds;	// 0x3c6cd
- (BOOL)saveServerIDToCalendar;	// 0x3c699
// converted property getter: - (void *)calEvent;	// 0x3c689
- (BOOL)loadCalRecordForAccount:(id)account;	// 0x3c4e9
// converted property setter: - (void)setCalEvent:(void *)event;	// 0x3c415
- (void)appendActiveSyncDataForTask:(id)task toWBXMLData:(id)wbxmldata;	// 0x3bb49
- (BOOL)deleteFromCalendar;	// 0x3ba51
- (void)parseASParseContext:(id)context root:(id)root parent:(id)parent callbackDict:(id)dict streamCallbackDict:(id)dict5 account:(id)account;	// 0x3b989
- (void)postProcessApplicationData;	// 0x3ae8d
- (void)_determineSelfnessWithLocalEvent:(void *)localEvent forAccount:(id)account;	// 0x3ad15
- (void)informExceptionsThatParentIsReadyForAccount:(id)account;	// 0x3ac6d
- (BOOL)saveDetachedEventsWithExistingRecord:(void *)existingRecord intoCalendar:(void *)calendar shouldMergeProperties:(BOOL)properties outMergeDidChooseLocalProperties:(BOOL *)outMerge account:(id)account;	// 0x3ab7d
- (void)_sanitizeLocalExceptionsForAccount:(id)account;	// 0x3a7c5
- (BOOL)saveToCalendarWithExistingRecord:(void *)existingRecord intoCalendar:(void *)calendar shouldMergeProperties:(BOOL)properties outMergeDidChooseLocalProperties:(BOOL *)outMerge account:(id)account;	// 0x3936d
- (BOOL)shouldUseInMemoryAttendeesForAccount:(id)account numExistingAttendees:(int)attendees;	// 0x39369
- (BOOL)_bailIfNotNewestDataForAccount:(id)account;	// 0x39365
// converted property setter: - (void)setMeetingResponseForEmail:(int)email;	// 0x39355
// converted property getter: - (int)meetingResponseForEmail;	// 0x39325
- (int)meetingResponse;	// 0x39311
- (int)_meetingResponseShouldFilterForEmail:(BOOL)_meetingResponse;	// 0x392a1
- (int)_nextAttendeeStatusWithOldStatus:(int)oldStatus account:(id)account;	// 0x39259
- (int)_nextAttendeeStatusWithOldStatus:(int)oldStatus meetingClassType:(int)type account:(id)account;	// 0x391c9
- (int)_nextEventStatusWithOldStatus:(int)oldStatus account:(id)account;	// 0x39181
- (int)_nextEventStatusWithOldStatus:(int)oldStatus meetingClassType:(int)type account:(id)account;	// 0x3912d
- (int)CalCalendarItemStatus;	// 0x3910d
- (int)calAttendeePendingStatus;	// 0x390d9
- (int)calAttendeeStatus;	// 0x390a5
- (id)description;	// 0x3900d
- (void)dealloc;	// 0x38ded
- (id)initWithCalEvent:(void *)calEvent serverID:(id)anId account:(id)account;	// 0x38ce1
- (id)init;	// 0x38c6d
- (void)_loadAttributesFromCalEvent:(void *)calEvent forAccount:(id)account;	// 0x3804d
- (void *)copySelfAttendeeGeneratedIfNecessaryWithLocalEvent:(void *)localEvent forAccount:(id)account;	// 0x37ebd
- (id)uidGeneratedIfNecessaryWithLocalEvent:(void *)localEvent;	// 0x37d79
- (int)dataclass;	// 0x37d75
- (id)asParseRules;	// 0x37635
- (id)timeZoneNameForCalFramework;	// 0x375ad
- (id)_transformedEndDateForActiveSync:(id)activeSync;	// 0x3752d
- (id)_transformedStartDateForActiveSync:(id)activeSync;	// 0x374d5
- (id)_transformedEndDateForCalFramework:(id)calFramework startDate:(id)date;	// 0x37409
- (id)_transformedStartDateForCalFramework:(id)calFramework;	// 0x373c9
@end
