/**
 * This header is generated by class-dump-z 0.2b.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/DataAccess
 */

#import <DataAccess/DataAccess-Structs.h>
#import <DataAccess/XXUnknownSuperclass.h>
#import <DataAccess/AccountCreationProtocol.h>
#import <DataAccess/BasicAccountSyncing.h>
#import <DataAccess/AccountFullAccountProtocol.h>
#import <DataAccess/DAAccount.h>

@class NSMutableDictionary, DAStatusReport, NSString, NSData, NSURL, NSArray, DASettingsTemplate;

@interface DAAccount : XXUnknownSuperclass <AccountCreationProtocol, BasicAccountSyncing> {
	int _dataclasses;	// 24 = 0x18
	BOOL _hasDirtyBits;	// 28 = 0x1c
	BOOL _hasInitted;	// 29 = 0x1d
	BOOL _shouldAutodiscoverPrincipalURL;	// 30 = 0x1e
	BOOL _shouldPromptForPassword;	// 31 = 0x1f
	BOOL _shouldFailAllTasks;	// 32 = 0x20
	BOOL _shouldUseOpportunisticSockets;	// 33 = 0x21
	int _originalDataclasses;	// 36 = 0x24
	CFDictionaryRef _changeTypesByDataclass;	// 40 = 0x28
	NSMutableDictionary *_haveWarnedAboutCertDict;	// 44 = 0x2c
	DASettingsTemplate *_settingsTemplate;	// 48 = 0x30
	DAStatusReport *_statusReport;	// 52 = 0x34
	CFDictionaryRef _consumers;	// 56 = 0x38
	CFURLStorageSessionRef _storageSession;	// 60 = 0x3c
}
@property(readonly, assign) DAStatusReport *statusReport;	// G=0x5329; @synthesize=_statusReport
@property(assign) BOOL shouldUseOpportunisticSockets;	// G=0x5359; S=0x5369; @synthesize=_shouldUseOpportunisticSockets
@property(readonly, assign) NSData *identityPersist;	// G=0x4a09; 
@property(assign) BOOL shouldFailAllTasks;	// G=0x5339; S=0x5349; @synthesize=_shouldFailAllTasks
@property(assign) BOOL shouldPromptForPassword;	// G=0x3e39; S=0x3e49; 
@property(copy) NSArray *emailAddresses;	// G=0x42d9; S=0x4311; 
@property(copy) NSString *emailAddress;	// G=0x4245; S=0x4291; 
@property(retain) DASettingsTemplate *settingsTemplate;	// G=0x52f1; S=0x5305; @synthesize=_settingsTemplate
@property(copy) NSURL *principalURL;	// G=0x46b5; S=0x4701; 
@property(assign) BOOL shouldAutodiscoverPrincipalURL;	// G=0x52d1; S=0x52e1; @synthesize=_shouldAutodiscoverPrincipalURL
@property(copy) NSString *scheme;	// G=0x4621; S=0x466d; 
@property(retain) NSData *encryptionIdentityPersistentReference;	// G=0x44ad; 
@property(retain) NSData *signingIdentityPersistentReference;	// G=0x4419; 
@property(readonly, assign, nonatomic) NSString *scheduleIdentifier;	// G=0x323d; 
@property(readonly, assign) BOOL isChildAccount;	// G=0x4d35; 
@property(readonly, assign) int enabledDataclassesBitmask;	// G=0x52c1; @synthesize=_dataclasses
@property(assign) BOOL useSSL;	// G=0x41b1; S=0x41fd; 
@property(copy) NSString *password;	// G=0x3e59; S=0x3fa1; 
@property(assign) int port;	// G=0x4541; S=0x458d; 
@property(copy) NSString *host;	// G=0x411d; S=0x4169; 
@property(copy) NSString *user;	// G=0x40fd; S=0x410d; 
@property(copy) NSString *username;	// G=0x4069; S=0x40b5; 
@property(copy) NSString *accountDescription;	// G=0x2b79; S=0x3279; 
@property(readonly, assign) NSString *persistentUUID;	// G=0x264d; 
@property(readonly, assign) NSString *tag;	// G=0x324d; 
@property(assign, setter=setDAAccountVersion:) int daAccountVersion;	// G=0x27ed; S=0x4d91; 
@property(retain) id version;	// G=0x3fd5; S=0x4021; converted property
@property(readonly, assign) BOOL hasDirtyBits;	// G=0x4791; converted property
+ (id)newAccountOfAccountType:(id)accountType;	// 0x4d3d
+ (id)defaultProperties;	// 0x4d39
+ (Class)classForAccountType:(id)accountType;	// 0x3701
+ (Class)daemonClass;	// 0x36b5
+ (Class)clientClass;	// 0x3669
+ (Class)accountClassWithProperties:(id)properties;	// 0x3639
+ (Class)accountClass;	// 0x315d
+ (id)basicAccountProperties;	// 0x2fd9
// declared property setter: - (void)setShouldUseOpportunisticSockets:(BOOL)useOpportunisticSockets;	// 0x5369
// declared property getter: - (BOOL)shouldUseOpportunisticSockets;	// 0x5359
// declared property setter: - (void)setShouldFailAllTasks:(BOOL)failAllTasks;	// 0x5349
// declared property getter: - (BOOL)shouldFailAllTasks;	// 0x5339
// declared property getter: - (id)statusReport;	// 0x5329
// declared property setter: - (void)setSettingsTemplate:(id)aTemplate;	// 0x5305
// declared property getter: - (id)settingsTemplate;	// 0x52f1
// declared property setter: - (void)setShouldAutodiscoverPrincipalURL:(BOOL)autodiscoverPrincipalURL;	// 0x52e1
// declared property getter: - (BOOL)shouldAutodiscoverPrincipalURL;	// 0x52d1
// declared property getter: - (int)enabledDataclassesBitmask;	// 0x52c1
- (CFURLStorageSessionRef)copyStorageSession;	// 0x514d
- (BOOL)childKeyIsSharedForWriting:(id)writing;	// 0x5149
- (BOOL)childKeyIsSharedForReading:(id)reading;	// 0x50a1
- (BOOL)isHotmailAccount;	// 0x509d
- (BOOL)isCalDAVChildAccount;	// 0x5099
- (BOOL)isCardDAVAccount;	// 0x5095
- (BOOL)isCalDAVAccount;	// 0x5091
- (BOOL)isLDAPAccount;	// 0x508d
- (BOOL)isActiveSyncAccount;	// 0x5089
- (BOOL)isEqualToAccount:(id)account;	// 0x4fe9
- (void)resetStatusReport;	// 0x4f19
- (BOOL)resetCertWarnings;	// 0x4ee9
- (void)setHaveWarnedAboutCert:(id)cert forHost:(id)host;	// 0x4e21
- (BOOL)haveWarnedAboutCert:(id)cert forHost:(id)host;	// 0x4dd5
// declared property setter: - (void)setDAAccountVersion:(int)version;	// 0x4d91
// declared property getter: - (int)daAccountVersion;	// 0x27ed
// declared property getter: - (BOOL)isChildAccount;	// 0x4d35
- (void)saveAccountSettings;	// 0x4d21
- (void)cleanupAccountFiles;	// 0x4cd9
- (void)setExceptions:(CFDataRef)exceptions forDigest:(id)digest;	// 0x4ba5
- (CFDataRef)exceptionsForDigest:(id)digest;	// 0x4b61
- (id)_exceptionsDict;	// 0x4b45
- (BOOL)_isIdentityManagedByProfile;	// 0x4b05
- (void)setIdentityCertificatePersistentID:(id)anId managedByProfile:(BOOL)profile;	// 0x4a25
// declared property getter: - (id)identityPersist;	// 0x4a09
- (void)saveChildAccountSettingsWithAccountsManager:(id)accountsManager;	// 0x49bd
- (void)saveAccountProperties;	// 0x494d
- (void)removeClientCertificateData;	// 0x48f5
- (id)defaultContainerIdentifierForDADataclass:(int)dadataclass;	// 0x48f1
- (void)stopMonitoringFolders;	// 0x4895
- (void)stopMonitoringFoldersWithIDs:(id)ids;	// 0x4839
- (BOOL)monitorFolderWithID:(id)anId;	// 0x4801
- (BOOL)monitorFoldersWithIDs:(id)ids;	// 0x47fd
- (void)tearDown;	// 0x47a1
// converted property getter: - (BOOL)hasDirtyBits;	// 0x4791
- (void)_setProperties:(id)properties;	// 0x4749
// declared property setter: - (void)setPrincipalURL:(id)url;	// 0x4701
// declared property getter: - (id)principalURL;	// 0x46b5
// declared property setter: - (void)setScheme:(id)scheme;	// 0x466d
// declared property getter: - (id)scheme;	// 0x4621
- (id)urlForKeychain;	// 0x45d5
// declared property setter: - (void)setPort:(int)port;	// 0x458d
// declared property getter: - (int)port;	// 0x4541
- (oneway void)setEncryptionIdentityPersistentReference:(id)reference;	// 0x44f9
// declared property getter: - (id)encryptionIdentityPersistentReference;	// 0x44ad
- (oneway void)setSigningIdentityPersistentReference:(id)reference;	// 0x4465
// declared property getter: - (id)signingIdentityPersistentReference;	// 0x4419
- (BOOL)accountContainsEmailAddress:(id)address;	// 0x4359
// declared property setter: - (void)setEmailAddresses:(id)addresses;	// 0x4311
// declared property getter: - (id)emailAddresses;	// 0x42d9
// declared property setter: - (void)setEmailAddress:(id)address;	// 0x4291
// declared property getter: - (id)emailAddress;	// 0x4245
// declared property setter: - (void)setUseSSL:(BOOL)ssl;	// 0x41fd
// declared property getter: - (BOOL)useSSL;	// 0x41b1
// declared property setter: - (void)setHost:(id)host;	// 0x4169
// declared property getter: - (id)host;	// 0x411d
// declared property setter: - (void)setUser:(id)user;	// 0x410d
// declared property getter: - (id)user;	// 0x40fd
// declared property setter: - (void)setUsername:(id)username;	// 0x40b5
// declared property getter: - (id)username;	// 0x4069
// converted property setter: - (void)setVersion:(id)version;	// 0x4021
// converted property getter: - (id)version;	// 0x3fd5
// declared property setter: - (void)setPassword:(id)password;	// 0x3fa1
- (void)setPassword:(id)password withAccessibility:(int)accessibility;	// 0x3f0d
- (int)keychainAccessibilityType;	// 0x3f09
// declared property getter: - (id)password;	// 0x3e59
// declared property setter: - (void)setShouldPromptForPassword:(BOOL)promptForPassword;	// 0x3e49
// declared property getter: - (BOOL)shouldPromptForPassword;	// 0x3e39
- (BOOL)upgradeAccount;	// 0x3de1
- (BOOL)_upgradeSelfFromPreKirkwood;	// 0x3c8d
- (BOOL)accountNeedsUpgrade;	// 0x3bb5
- (void)_removeHostsToTrust;	// 0x3b85
- (void)cancelAutodiscovery;	// 0x3b81
- (BOOL)autodiscoverAccountConfigurationWithConsumer:(id)consumer;	// 0x3b7d
- (void)checkValidityWithConsumer:(id)consumer;	// 0x3b35
- (void)removeConsumerForTask:(id)task;	// 0x3b15
- (id)consumerForTask:(id)task;	// 0x3af1
- (void)setConsumer:(id)consumer forTask:(id)task;	// 0x3a99
- (id)domainOnly;	// 0x3a95
- (id)usernameWithoutDomain;	// 0x3a85
- (void)takeValuesFromAccount:(id)account;	// 0x3989
- (id)stateString;	// 0x3909
- (void)stopMonitoringFolderWithID:(id)anId;	// 0x38ad
- (void)suspendMonitoringFoldersWithIDs:(id)ids;	// 0x3851
- (void)resumeMonitoringFoldersWithIDs:(id)ids;	// 0x3809
- (void)setAccountIntProperty:(int)property forKey:(id)key;	// 0x37c9
- (int)accountIntPropertyForKey:(id)key;	// 0x37a1
- (void)setAccountBoolProperty:(BOOL)property forKey:(id)key;	// 0x3761
- (BOOL)accountBoolPropertyForKey:(id)key;	// 0x3739
- (id)spinnerIdentifiers;	// 0x35ed
- (int)accountChangeTypeForDataclass:(int)dataclass;	// 0x35c1
- (BOOL)originallyEnabledForDADataclass:(int)dadataclass;	// 0x35a9
- (void)setEnabled:(BOOL)enabled forDADataclass:(int)dadataclass changeType:(int)type;	// 0x32f9
- (BOOL)enabledForDADataclass:(int)dadataclass;	// 0x32e1
- (BOOL)isDisabled;	// 0x2ad1
- (BOOL)supportsDADataclass:(int)dataclass;	// 0x3299
// declared property setter: - (void)setAccountDescription:(id)description;	// 0x3279
// declared property getter: - (id)accountDescription;	// 0x2b79
- (void)_setPersistentUUID:(id)uuid;	// 0x325d
// declared property getter: - (id)tag;	// 0x324d
// declared property getter: - (id)persistentUUID;	// 0x264d
// declared property getter: - (id)scheduleIdentifier;	// 0x323d
- (id)syncStoreIdentifier;	// 0x2705
- (id)accountID;	// 0x2591
- (void)resetAccountID;	// 0x3179
- (id)init;	// 0x30b5
- (id)initWithProperties:(id)properties;	// 0x2291
- (void)dealloc;	// 0x2715
@end

@interface DAAccount (TrustHandling)
- (id)description;	// 0x5fad
- (BOOL)handleTrustChallenge:(id)challenge;	// 0x5c79
- (void)handleTrust:(SecTrust *)trust forHost:(id)host withCompletionBlock:(id)completionBlock;	// 0x5501
- (id)_serverSuffixesToAlwaysFail;	// 0x5479
- (int)_actionForTrust:(SecTrust *)trust host:(id)host service:(id)service;	// 0x5379
@end

@interface DAAccount (AuthenticationExtensions) <AccountFullAccountProtocol>
- (void)_handlePasswordNotification:(CFUserNotificationRef)notification response:(unsigned long)response callback:(id)callback;	// 0x682d
- (void)renewAccountCredentialsWithHandler:(id)handler;	// 0x617d
- (id)localizedInvalidPasswordMessage;	// 0x60dd
- (id)localizedIdenticalAccountFailureMessage;	// 0x603d
@end

@interface DAAccount (EventsSupport)
- (void)cancelDownloadingInstance:(id)instance error:(id)error;	// 0x6a75
- (id)beginDownloadingAttachmentWithUUID:(id)uuid consumer:(id)consumer;	// 0x69d5
- (BOOL)sendEmailsForCalEvents:(id)calEvents consumer:(id)consumer;	// 0x69d1
- (void)synchronizeEventsFolder:(id)folder previousTag:(id)tag actions:(id)actions highestIdContext:(XXStruct_SMhV9B *)context isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed consumer:(id)consumer;	// 0x69cd
- (id)eventsFolders;	// 0x69c9
- (id)defaultEventsFolder;	// 0x69c5
@end

@interface DAAccount (ContactsSupport)
- (void)synchronizeContactsFolder:(id)folder previousTag:(id)tag previousSyncToken:(id)token actions:(id)actions highestIdContext:(XXStruct_K5nmsA *)context isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed previousTagIsSuspect:(BOOL)suspect consumer:(id)consumer;	// 0x6aa9
- (id)contactsFolders;	// 0x6aa5
- (id)defaultContactsFolder;	// 0x6aa1
@end

@interface DAAccount (MailFolderSupport)
- (id)deletedItemsFolder;	// 0x6b05
- (id)sentItemsFolder;	// 0x6b01
- (id)inboxFolder;	// 0x6afd
@end

@interface DAAccount (InvitationSupport)
- (BOOL)reattemptInvitationLinkageForMetaData:(id)metaData inFolderWithId:(id)anId;	// 0x6b09
@end

@interface DAAccount (Searching)
- (int)supportsEmailFlagging;	// 0xed75
- (int)supportsMailboxSearch;	// 0xed71
- (BOOL)searchQueriesRunning;	// 0xed6d
- (void)cancelAllSearchQueries;	// 0xed69
- (void)cancelSearchQuery:(id)query;	// 0xed65
- (void)performSearchQuery:(id)query;	// 0xecc1
@end

@interface DAAccount (ToDosSupport)
@property(assign) int toDosNumberOfPastDaysToSync;	// G=0x108c9; S=0x108cd; converted property
// converted property setter: - (void)setToDosNumberOfPastDaysToSync:(int)sync;	// 0x108cd
// converted property getter: - (int)toDosNumberOfPastDaysToSync;	// 0x108c9
- (void)synchronizeToDosFolder:(id)dosFolder previousTag:(id)tag actions:(id)actions highestIdContext:(XXStruct_SMhV9B *)context isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed consumer:(id)consumer;	// 0x108c5
- (id)toDosFolders;	// 0x108c1
- (id)defaultToDosFolder;	// 0x108bd
@end

@interface DAAccount (NotesSupport)
- (void)synchronizeNotesFolder:(id)folder noteContext:(id)context previousTag:(id)tag actions:(id)actions changeSet:(id)set notesToDeleteAfterSync:(id)deleteAfterSync isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed consumer:(id)consumer;	// 0x1e865
- (id)notesFolders;	// 0x1e861
- (id)defaultNotesFolder;	// 0x1e85d
@end

@interface DAAccount (BookmarksSupport)
- (void)synchronizeBookmarkTreeWithConsumer:(id)consumer hasRemoteChanges:(BOOL)changes;	// 0x24b59
- (void)getRootFolderWithConsumer:(id)consumer;	// 0x24b55
@end
