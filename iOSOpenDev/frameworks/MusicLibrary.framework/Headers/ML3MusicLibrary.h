/**
 * This header is generated by class-dump-z 0.2b.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import <MusicLibrary/MusicLibrary-Structs.h>
#import <MusicLibrary/XXUnknownSuperclass.h>
#import <MusicLibrary/ML3MusicLibrary.h>

@class ML3DatabaseMetadata, ML3NondurableWriteSet, ML3UbiquitousDatabase, NSString, ML3Container, NSMutableArray, NSArray, ML3MusicLibrary_SQLiteDatabaseContext;

@interface ML3MusicLibrary : XXUnknownSuperclass {
@private
	ML3MusicLibrary_SQLiteDatabaseContext *_mainDatabaseContext;	// 4 = 0x4
	ML3MusicLibrary_SQLiteDatabaseContext *_backgroundDatabaseContext;	// 8 = 0x8
	ML3UbiquitousDatabase *_ubiquitousDatabase;	// 12 = 0xc
	dispatch_queue_s *_backgroundQueue;	// 16 = 0x10
	opaque_pthread_t *_backgroundQueueOwner;	// 20 = 0x14
	NSString *_path;	// 24 = 0x18
	NSMutableArray *_pendingNotifyPostNames;	// 28 = 0x1c
	NSString *_notifyName;	// 32 = 0x20
	int _notifyToken;	// 36 = 0x24
	NSString *_nonContentsNotifyName;	// 40 = 0x28
	int _nonContentsNotifyToken;	// 44 = 0x2c
	NSString *_displayValuesNotifyName;	// 48 = 0x30
	int _displayValuesNotifyToken;	// 52 = 0x34
	NSString *_syncGenerationNotifyName;	// 56 = 0x38
	int _syncGenerationNotifyToken;	// 60 = 0x3c
	BOOL _enableWrites;	// 64 = 0x40
	BOOL _requiresProcessAssertion;	// 65 = 0x41
	int _backupDisabledCount;	// 68 = 0x44
	BOOL _backupNeeded;	// 72 = 0x48
	BOOL _hasEverConnectedToDatabase;	// 73 = 0x49
	id _mcSettingsObserver;	// 76 = 0x4c
	dispatch_queue_s *_artworkQueue;	// 80 = 0x50
	int _artworkBlobFD;	// 84 = 0x54
	dispatch_queue_s *_nondurableConcurrentQueue;	// 88 = 0x58
	ML3NondurableWriteSet *_nondurableWriteSet;	// 92 = 0x5c
}
@property(readonly, assign) long long autoFilledTracksTotalSize;	// G=0x2271d; 
@property(assign) long long syncGenerationID;	// G=0xaa41; S=0x224fd; 
@property(readonly, assign) long long currentRevision;	// G=0x22391; 
@property(readonly, assign) long long persistentID;	// G=0x22225; 
@property(readonly, assign, nonatomic) BOOL hasEverConnectedToDatabase;	// G=0xaea5; @synthesize=_hasEverConnectedToDatabase
@property(readonly, assign) BOOL requiresPostProcessing;	// G=0x2831; 
@property(readonly, assign) BOOL mediaRestrictionEnabled;	// G=0x8909; 
@property(readonly, assign) NSArray *preferredSubtitleTracks;	// G=0x1069d; 
@property(readonly, assign) NSArray *preferredAudioTracks;	// G=0x10525; 
@property(readonly, assign) ML3DatabaseMetadata *databaseInfo;	// G=0x10581; 
@property(readonly, assign) ML3Container *purchasedTracksPlaylist;	// G=0x20451; 
@property(readonly, assign) NSArray *localizedSectionIndexTitles;	// G=0x8e95; 
@property(readonly, assign, nonatomic, getter=isNondurableWritingActive) BOOL nondurableWritingActive;	// G=0xe43d; 
@property(readonly, assign, nonatomic) BOOL writable;	// G=0x1ad5; 
@property(readonly, assign) NSString *path;	// G=0x281d; @synthesize=_path
@property(readonly, retain) ML3MusicLibrary_SQLiteDatabaseContext *mainDatabaseContext;	// G=0x3cbd; converted property
@property(readonly, retain) ML3UbiquitousDatabase *ubiquitousDatabase;	// G=0x5791; converted property
+ (unsigned)readableArtworkFormatIDForArtworkFormatID:(unsigned)artworkFormatID;	// 0x23205
+ (MLArtworkFormatSpec)artworkFormatSpecForArtworkFormatID:(unsigned)artworkFormatID;	// 0xc329
+ (id)_autoFillTrackPredicate;	// 0x22685
+ (void)enumerateSortMapTablesUsingBlock:(id)block;	// 0x21ce9
+ (id)sectionIndexTitleForSectionHeader:(id)sectionHeader;	// 0x9b91
+ (id)sectionIndexTitles;	// 0x9b49
+ (id)localizedSectionIndexTitleForSectionHeader:(id)sectionHeader;	// 0x9ef9
+ (id)localizedSectionHeaderForSectionHeader:(id)sectionHeader;	// 0xa961
+ (BOOL)executeSQL:(id)sql usingHandle:(sqlite3 *)handle;	// 0x8da5
+ (BOOL)executeSQL:(id)sql usingHandle:(sqlite3 *)handle waitIfBusy:(BOOL)busy;	// 0x8dc9
+ (void)_stepStatement:(sqlite3_stmt *)statement hasRow:(BOOL *)row didFinish:(BOOL *)finish;	// 0x51a5
+ (BOOL)statementDidFinishAfterStepping:(sqlite3_stmt *)statement;	// 0xf6dd
+ (BOOL)statementHasRowAfterStepping:(sqlite3_stmt *)stepping;	// 0x517d
+ (void)closeDatabaseHandle:(sqlite3 *)handle;	// 0x1ed21
+ (sqlite3 *)_openedDatabaseHandleForPath:(id)path enableWrites:(BOOL)writes forLibrary:(id)library;	// 0x3d6d
+ (sqlite3 *)openedDatabaseHandleForPath:(id)path enableWrites:(BOOL)writes;	// 0x1e78d
+ (id)mainDatabasePath;	// 0x1a41
+ (id)sharedLibrary;	// 0x1695
+ (void)setImportationEnabled:(BOOL)enabled;	// 0x1599
+ (BOOL)importationEnabled;	// 0x1e071
+ (void)initialize;	// 0x12cd
// declared property getter: - (BOOL)hasEverConnectedToDatabase;	// 0xaea5
// declared property getter: - (id)path;	// 0x281d
- (void)removeOrphanedTracks;	// 0x26435
- (void)_scheduleCommitNondurableWritesAfterTimeInterval:(double)interval;	// 0x262ed
- (BOOL)_commitNondurableWrites;	// 0xeed9
- (void)applyUbiquitousBookmarksToTrack:(id)track;	// 0x26075
- (void)updateUbiquitousBookmarksFromTrack:(id)track;	// 0x25f29
- (void)updateUbiquitousBookmarksWithKey:(id)key bookmarkTime:(id)time timestamp:(double)timestamp;	// 0x259f9
- (double)timestampForAppliedUbiquitousBookmarkKey:(id)appliedUbiquitousBookmarkKey;	// 0x257c5
- (BOOL)setValue:(id)value forDatabaseProperty:(id)databaseProperty;	// 0x25625
- (id)valueForDatabaseProperty:(id)databaseProperty;	// 0xaa75
- (id)appleIDForDSID:(unsigned long long)dsid;	// 0x25405
- (BOOL)setAppleID:(id)anId forDSID:(unsigned long long)dsid;	// 0x25275
- (void)_accessAccountCacheDBForSQL:(id)sql usingBlock:(id)block;	// 0x25181
- (BOOL)compactArtwork;	// 0x24915
- (BOOL)deleteArtworkForCacheID:(id)cacheID;	// 0x24615
- (BOOL)deleteAllArtwork;	// 0x243b1
- (BOOL)insertArtworkWithImageData:(id)imageData forCacheID:(id)cacheID;	// 0x23d1d
- (BOOL)_insertImageBytes:(const void *)bytes length:(unsigned long)length forCacheID:(id)cacheID formatID:(unsigned)anId imageSubRect:(CGRect)rect;	// 0x233d1
- (BOOL)hasArtworkForCacheID:(id)cacheID;	// 0x23251
- (void)loadArtworkForCacheID:(id)cacheID formatID:(unsigned)anId completionHandler:(id)handler;	// 0x102c5
- (void)_accessArtworkBlobFDWithBlock:(id)block;	// 0x104cd
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)leastTotalSize;	// 0x228e5
// declared property getter: - (long long)autoFilledTracksTotalSize;	// 0x2271d
- (void)enumeratePersistentIDsAfterRevision:(long long)revision usingBlock:(id)block;	// 0x22561
// declared property getter: - (long long)syncGenerationID;	// 0xaa41
// declared property setter: - (void)setSyncGenerationID:(long long)anId;	// 0x224fd
// declared property getter: - (long long)currentRevision;	// 0x22391
// declared property getter: - (long long)persistentID;	// 0x22225
- (BOOL)updateSortMap;	// 0x2206d
- (long long)addStringToSortMap:(id)sortMap;	// 0x21e89
- (BOOL)isReadable;	// 0x21e85
- (BOOL)_mustProcessLanguageChange;	// 0x21e09
// declared property getter: - (BOOL)mediaRestrictionEnabled;	// 0x8909
- (void)_postDisplayValuesChangeNotificationLocalOnly:(BOOL)only;	// 0x21c81
- (void)_postNonContentsChangeNotificationAndScheduleFlushLocalOnly:(BOOL)only;	// 0x11131
- (void)_postChangeNotificationAndScheduleFlushLocalOnly:(BOOL)only;	// 0x10065
- (void)_delayableNotifyPost:(id)post;	// 0x10169
- (void)savePlaylistsSinceRevision:(long long)revision withGrappaID:(unsigned)grappaID;	// 0x210ed
- (void)savePlaylists;	// 0x210c9
- (void)saveTrackMetadataSinceRevision:(long long)revision withGrappaID:(unsigned)grappaID;	// 0x208ed
- (void)saveTrackMetadata;	// 0x208c9
// declared property getter: - (id)preferredSubtitleTracks;	// 0x1069d
// declared property getter: - (id)preferredAudioTracks;	// 0x10525
// declared property getter: - (id)databaseInfo;	// 0x10581
// declared property getter: - (id)purchasedTracksPlaylist;	// 0x20451
- (void)notifyDisplayValuesPropertyDidChange;	// 0x203a5
- (void)notifyNonContentsPropertyDidChange;	// 0x110dd
- (void)notifyContentsDidChange;	// 0x10011
- (unsigned)sectionIndexTitleIndexForSectionIndex:(unsigned)sectionIndex;	// 0x959d
- (id)localizedSectionHeaderForSectionIndex:(unsigned)sectionIndex;	// 0x9349
// declared property getter: - (id)localizedSectionIndexTitles;	// 0x8e95
- (void)performTransactionKind:(int)kind waitIfBusy:(BOOL)busy withBlock:(id)block;	// 0x8ae5
- (void)performTransactionKind:(int)kind withBlock:(id)block;	// 0x1fae5
- (void)performTransactionAllowingWrites:(BOOL)writes withBlock:(id)block;	// 0x8ab9
- (void)performTransactionWithBlock:(id)block;	// 0xfa9d
// declared property getter: - (BOOL)isNondurableWritingActive;	// 0xe43d
- (void)prepareStatementForSQL:(id)sql cache:(BOOL)cache usingBlock:(id)block;	// 0x3b91
- (void)prepareStatementForSQL:(id)sql usingBlock:(id)block;	// 0x3b71
- (id)groupingKeyForString:(id)string;	// 0x1f735
- (void)accessSortKeyBuilder:(id)builder;	// 0x94d1
- (void)accessDatabaseUsingBlock:(id)block;	// 0x52d9
- (void)_accessDatabaseContextUsingBlock:(id)block;	// 0x3c41
- (void)reconnectToDatabase;	// 0x1f519
- (void)_dispatchBackgroundAsynchronouslyUsingBlock:(id)block;	// 0x1f469
- (void)_dispatchBackgroundSynchronouslyUsingBlock:(id)block;	// 0x532d
- (void)_onBackgroundQueuePerformBlock:(id)block;	// 0x53a1
- (void)reconnectBackgroundDatabaseContext;	// 0x1f3c1
- (void)reconnectMainDatabaseContext;	// 0x1f371
- (id)backgroundQueue_backgroundDatabaseContext;	// 0x53d9
// converted property getter: - (id)mainDatabaseContext;	// 0x3cbd
- (void)incrementalVaccuumIfAppropriate;	// 0x1f01d
- (BOOL)populateStaticItemsOfDynamicContainers;	// 0x1eec9
- (BOOL)executeSQL:(id)sql;	// 0x1ed65
// declared property getter: - (BOOL)requiresPostProcessing;	// 0x2831
- (sqlite3 *)openedDatabaseHandle;	// 0x3d21
- (void)dealloc;	// 0x1e5c5
// converted property getter: - (id)ubiquitousDatabase;	// 0x5791
// declared property getter: - (BOOL)writable;	// 0x1ad5
- (void)updateTrackIntegrity;	// 0x1e5a9
- (void)migratePresignedValidity;	// 0x1e381
- (id)initWithPath:(id)path enableWrites:(BOOL)writes;	// 0x16c1
@end

@interface ML3MusicLibrary (ML3EntityAdditions)
- (void)prepareStatementForSQLPrefix:(id)sqlprefix inPersistentIDs:(const long long *)persistentIDs count:(unsigned)count usingBlock:(id)block;	// 0x1dc31
@end

@interface ML3MusicLibrary (NondurableWriting)
- (id)nondurableWriteSetForWriting;	// 0xe89d
- (id)nondurableWriteSetForReading;	// 0x5051
@end

@interface ML3MusicLibrary (ML3ArtistAdditions)
- (id)artistForArtistName:(id)artistName seriesName:(id)name;	// 0x2b31d
@end

@interface ML3MusicLibrary (ML3AlbumAdditions)
- (id)albumForAlbumArtistPersistentID:(long long)albumArtistPersistentID albumName:(id)name feedURL:(id)url seasonNumber:(id)number compilation:(BOOL)compilation;	// 0x2ba7d
@end

@interface ML3MusicLibrary (ML3GenreAdditions)
- (id)genreForGenre:(id)genre;	// 0x2f315
@end

@interface ML3MusicLibrary (ML3ComposerAdditions)
- (id)composerForComposerName:(id)composerName;	// 0x35ead
@end

@interface ML3MusicLibrary (ML3AlbumArtistAdditions)
- (id)albumArtistForEffectiveAlbumArtistName:(id)effectiveAlbumArtistName;	// 0x366e5
@end

@interface ML3MusicLibrary (ProcessingAdditions)
- (void)updateOrderingLanguagesForCurrentLanguage;	// 0x36da1
- (BOOL)updateActivePlaylistNamesForCurrentLanguage;	// 0x36c59
@end

@interface ML3MusicLibrary (ML3TrackImporter)
- (BOOL)populateArtworkCacheWithArtworkData:(id)artworkData trackValues:(id)values;	// 0x3c295
@end

@interface ML3MusicLibrary (Schema)
+ (BOOL)updateSortMapOnHandle:(sqlite3 *)handle usingTransaction:(BOOL)transaction;	// 0x43001
+ (BOOL)createIndexesUsingHandle:(sqlite3 *)handle;	// 0x411a1
+ (BOOL)dropIndexesUsingHandle:(sqlite3 *)handle;	// 0x41181
+ (BOOL)dropIndexesUsingHandle:(sqlite3 *)handle tableNames:(const char *)names;	// 0x40f81
+ (BOOL)migrateToCurrentUserVersionUsingHandle:(sqlite3 *)currentUserVersionUsingHandle;	// 0x3ff9d
+ (BOOL)orderingLanguageMatchesSystemUsingHandle:(sqlite3 *)handle;	// 0x55cd
+ (BOOL)userVersionMatchesSystemUsingHandle:(sqlite3 *)handle;	// 0x543d
+ (int)userVersionUsingHandle:(sqlite3 *)handle;	// 0x549d
+ (BOOL)schemaExactlyMatchesSystemUsingHandle:(sqlite3 *)handle;	// 0x3fc5d
+ (id)systemCurrentLanguage;	// 0x56f5
+ (BOOL)buildDatabaseTablesUsingHandle:(sqlite3 *)handle usingTransaction:(BOOL)transaction;	// 0x3f83d
+ (id)indexSchemaSQL;	// 0x3f719
+ (id)itemIndexSchemaSQL;	// 0x3f6a1
+ (id)allSchemaSQL;	// 0x3f4c9
+ (id)itemSchemaSQL;	// 0x3f4bd
+ (id)sortMapSchemaSQL;	// 0x3f4b1
+ (id)storeLinkSchemaSQL;	// 0x3f4a5
+ (int)currentUserVersion;	// 0x55c1
- (BOOL)resetAllContents;	// 0x439cd
- (long long)insertStringIntoSortMapNoTransaction:(id)transaction;	// 0xf265
- (id)insertStringsIntoSortMap:(id)map;	// 0x429f5
- (id)_insertStringsIntoSortMapOrFail:(id)fail;	// 0x41949
- (XXStruct_Cy4r_A)nameOrderForString:(id)string;	// 0xe2e5
- (BOOL)coerceValidDatabase;	// 0x41579
- (BOOL)createIndexes;	// 0x413dd
- (BOOL)dropItemIndexes;	// 0x4125d
- (BOOL)deleteAndRecreateDatabaseUsingHandle:(sqlite3 **)handle;	// 0x40c85
- (BOOL)buildDatabaseTables;	// 0x3fae5
@end

@interface ML3MusicLibrary (ML3LocationKindAdditions)
- (id)locationKindForKind:(id)kind;	// 0x45645
@end
