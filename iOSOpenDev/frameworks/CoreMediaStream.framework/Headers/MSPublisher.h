/**
 * This header is generated by class-dump-z 0.2b.
 *
 * Source: /System/Library/PrivateFrameworks/CoreMediaStream.framework/CoreMediaStream
 */

#import <CoreMediaStream/MSPublisher.h>
#import <CoreMediaStream/MSPublishStreamsProtocolDelegate.h>
#import <CoreMediaStream/MSPublishStorageProtocolDelegate.h>
#import <CoreMediaStream/MSCupidStateMachine.h>

@class NSMutableArray, NSMutableDictionary, NSURL, MSMediaStreamDaemon, MSPublishStreamsProtocol, MSObjectQueue;
@protocol MSPublisherDelegate, MSPublishStorageProtocol;

@protocol MSPublisher
@property(assign, nonatomic) int publishBatchSize;
@property(assign, nonatomic) id<MSPublisherDelegate> delegate;
// declared property setter: - (void)setPublishBatchSize:(int)size;
// declared property getter: - (int)publishBatchSize;
// declared property setter: - (void)setDelegate:(id)delegate;
// declared property getter: - (id)delegate;
- (void)publish;
- (void)stop;
- (void)abort;
- (void)submitAssetCollectionsForPublication:(id)publication skipAssetCollections:(id)collections;
- (void)submitAssetCollectionsForPublication:(id)publication;
@end

@interface MSPublisher : MSCupidStateMachine <MSPublisher, MSPublishStreamsProtocolDelegate, MSPublishStorageProtocolDelegate> {
@private
	id<MSPublisherDelegate> _delegate;	// 24 = 0x18
	MSMediaStreamDaemon *_daemon;	// 28 = 0x1c
	int _state;	// 32 = 0x20
	MSObjectQueue *_uploadQueue;	// 36 = 0x24
	NSMutableArray *_requestAuthQueue;	// 40 = 0x28
	NSMutableArray *_sendingQueue;	// 44 = 0x2c
	NSMutableDictionary *_fileHashToAssetMap;	// 48 = 0x30
	MSPublishStreamsProtocol *_protocol;	// 52 = 0x34
	id<MSPublishStorageProtocol> _storageProtocol;	// 56 = 0x38
	NSURL *_storageProtocolURL;	// 60 = 0x3c
	NSMutableArray *_tempFiles;	// 64 = 0x40
	NSMutableDictionary *_maxSizeByUTI;	// 68 = 0x44
	long long _publishTargetByteCount;	// 72 = 0x48
	int _publishBatchSize;	// 80 = 0x50
	int _maxErrorCount;	// 84 = 0x54
}
@property(assign, nonatomic) id<MSPublisherDelegate> delegate;	// G=0x8e49; S=0x8e59; @synthesize=_delegate
@property(assign, nonatomic) int publishBatchSize;	// G=0x8ee9; S=0x8ef9; @synthesize=_publishBatchSize
@property(assign, nonatomic) long long publishTargetByteCount;	// G=0x8ebd; S=0x8ed5; @synthesize=_publishTargetByteCount
@property(retain, nonatomic) NSURL *storageProtocolURL;	// G=0x8e89; S=0x8e99; @synthesize=_storageProtocolURL
@property(assign, nonatomic) MSMediaStreamDaemon *daemon;	// G=0x8e69; S=0x8e79; @synthesize=_daemon
+ (BOOL)isInRetryState;	// 0x39d9
+ (void)stopAllActivities;	// 0x3931
+ (id)personIDsWithOutstandingActivities;	// 0x3915
+ (id)nextActivityDateForPersonID:(id)personID;	// 0x38f5
+ (id)nextActivityDate;	// 0x3809
+ (void)_setMasterNextActivityDate:(id)date forPersonID:(id)personID;	// 0x35b5
+ (void)forgetPersonID:(id)anId;	// 0x3565
+ (id)_clearInstantiatedPublishersByPersonID;	// 0x353d
+ (id)existingPublisherForPersonID:(id)personID;	// 0x3521
+ (id)publisherForPersonID:(id)personID;	// 0x3449
// declared property setter: - (void)setPublishBatchSize:(int)size;	// 0x8ef9
// declared property getter: - (int)publishBatchSize;	// 0x8ee9
// declared property setter: - (void)setPublishTargetByteCount:(long long)count;	// 0x8ed5
// declared property getter: - (long long)publishTargetByteCount;	// 0x8ebd
// declared property setter: - (void)setStorageProtocolURL:(id)url;	// 0x8e99
// declared property getter: - (id)storageProtocolURL;	// 0x8e89
// declared property setter: - (void)setDaemon:(id)daemon;	// 0x8e79
// declared property getter: - (id)daemon;	// 0x8e69
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x8e59
// declared property getter: - (id)delegate;	// 0x8e49
- (BOOL)_isInRetryState;	// 0x8e21
- (void)stop;	// 0x8e11
- (void)abort;	// 0x8e01
- (void)_forget;	// 0x8db1
- (void)_abort;	// 0x8be1
- (id)_abortedError;	// 0x8b89
- (int)_stop;	// 0x8a99
- (void)publishStreamsProtocol:(id)protocol didFinishSendingUploadCompleteError:(id)error;	// 0x847d
- (void)_sendUploadComplete;	// 0x8411
- (void)publishStorageProtocolDidFinishPublishingAllAssets:(id)publishStorageProtocol;	// 0x7949
- (void)_categorizeError:(id)error setOutIsIgnorable:(BOOL *)ignorable setOutIsCounted:(BOOL *)counted setOutIsFatal:(BOOL *)fatal setOutNeedsBackoff:(BOOL *)backoff setOutIsTemporary:(BOOL *)temporary setOutIsTokenAuth:(BOOL *)auth setOutIsAuthError:(BOOL *)error8;	// 0x7831
- (void)publishStorageProtocol:(id)protocol didFinishUsingFD:(int)fd forAsset:(id)asset;	// 0x77c9
- (int)publishStorageProtocol:(id)protocol didRequestFDForAsset:(id)asset;	// 0x75b9
- (void)publishStorageProtocol:(id)protocol didFinishUploadingAsset:(id)asset error:(id)error;	// 0x7539
- (void)_sendFilesToMMCS;	// 0x7181
- (void)publishStreamsProtocol:(id)protocol didReceiveAuthenticationError:(id)error;	// 0x70c5
- (void)publishStreamsProtocol:(id)protocol didFinishUploadingMetadataResponse:(id)response error:(id)error;	// 0x5e65
- (id)_invalidStreamsResponseErrorUnderlyingError:(id)error;	// 0x5df5
- (void)_sendMetadataToStreams;	// 0x5a59
- (void)submitAssetCollectionsForPublication:(id)publication skipAssetCollections:(id)collections;	// 0x516d
- (void)submitAssetCollectionsForPublication:(id)publication;	// 0x5159
- (void)_didFinishUsingAssetCollections:(id)collections;	// 0x5021
- (void)_removeAssetsInAssetCollectionWrappersFromAssetMap:(id)assetMap;	// 0x4e79
- (void)_removeAssetFromFileHashMap:(id)fileHashMap;	// 0x4ddd
- (void)_addAssetToFileHashMap:(id)fileHashMap;	// 0x4d35
- (void)_requestDerivatives;	// 0x49f5
- (void)publish;	// 0x4871
- (BOOL)_isAllowedToUpload;	// 0x47b1
- (void)_serverSideConfigurationDidChange:(id)_serverSideConfiguration;	// 0x4691
- (void)_refreshServerSideConfiguredParameters;	// 0x416d
- (void)computeHashForAsset:(id)asset;	// 0x414d
- (BOOL)enqueueAssetCollections:(id)collections outError:(id *)error;	// 0x3f71
- (void)_updateMasterManifest;	// 0x3edd
- (void)dealloc;	// 0x3e9d
- (void)deactivate;	// 0x3cf1
- (id)initWithPersonID:(id)personID baseURL:(id)url;	// 0x3a99
@end
