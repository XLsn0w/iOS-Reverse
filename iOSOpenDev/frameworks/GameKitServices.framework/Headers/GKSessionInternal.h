/**
 * This header is generated by class-dump-z 0.2b.
 *
 * Source: /System/Library/PrivateFrameworks/GameKitServices.framework/GameKitServices
 */

#import <GameKitServices/GameKitServices-Structs.h>
#import <GameKitServices/GKSessionInternal.h>
#import <GameKitServices/XXUnknownSuperclass.h>

@class GKAutoPeerIDTable, GKTable, GKList, GKSession, GKVoiceChatSessionListener, NSString, GKConnection;
@protocol GKSessionDelegate, GKSessionPrivateDelegate, GKSessionDataReceiveHandler, GKSessionDOOBReceiveHandler;

@interface GKSessionInternal : XXUnknownSuperclass {
@private
	GKSession *_session;	// 4 = 0x4
	NSString *domain;	// 8 = 0x8
	NSString *serviceType;	// 12 = 0xc
	unsigned _port;	// 16 = 0x10
	NSString *_displayName;	// 20 = 0x14
	unsigned _pid;	// 24 = 0x18
	unsigned maxPeers;	// 28 = 0x1c
	OpaqueGCKSession *sessionRef;	// 32 = 0x20
	OpaqueAGPSession *agpSessionRef;	// 36 = 0x24
	GKConnection *_connection;	// 40 = 0x28
	id<GKSessionDelegate> _delegate;	// 44 = 0x2c
	id<GKSessionPrivateDelegate> _privateDelegate;	// 48 = 0x30
	id<GKSessionDataReceiveHandler> _dataReceiveHandler;	// 52 = 0x34
	void *_dataReceiveHandlerContext;	// 56 = 0x38
	id<GKSessionDOOBReceiveHandler> _doobReceiveHandler[2];	// 60 = 0x3c
	void *_doobReceiveHandlerContext[2];	// 68 = 0x44
	GKTable *_peerInfoTable;	// 76 = 0x4c
	GKTable *_peerNameTable;	// 80 = 0x50
	GKAutoPeerIDTable *_peerIDTable;	// 84 = 0x54
	GKList *_peersAvailable;	// 88 = 0x58
	GKList *_peersConnected;	// 92 = 0x5c
	GKList *_peersForCleanup;	// 96 = 0x60
	GKList *_peersPendingIncomingInvitation;	// 100 = 0x64
	GKList *_peersPendingOutgoingInvitation;	// 104 = 0x68
	opaque_pthread_mutex_t _lock;	// 108 = 0x6c
	opaque_pthread_mutex_t _delegateLock;	// 152 = 0x98
	BOOL _isSearching;	// 196 = 0xc4
	BOOL _isPublishing;	// 197 = 0xc5
	BOOL _sessionStarted;	// 198 = 0xc6
	int _mode;	// 200 = 0xc8
	BOOL _isBusy;	// 204 = 0xcc
	NSString *sessionID;	// 208 = 0xd0
	NSString *displayName;	// 212 = 0xd4
	double disconnectTimeout;	// 216 = 0xd8
	DNSServiceRef_tRef _dnsServiceConnection;	// 224 = 0xe0
	DNSServiceRef_tRef _dnsServiceResolveConnection;	// 228 = 0xe4
	int _sReset;	// 232 = 0xe8
	DNSServiceRef_tRef _serviceBrowser;	// 236 = 0xec
	DNSServiceRef_tRef _service;	// 240 = 0xf0
	DNSServiceRef_tRef _oldService;	// 244 = 0xf4
	BOOL _handleEventsRunning;	// 248 = 0xf8
	BOOL _stopHandlingEvents;	// 249 = 0xf9
	BOOL _wifiEnabled;	// 250 = 0xfa
	BOOL _shutdown;	// 251 = 0xfb
	GKVoiceChatSessionListener *_voiceChatListener;	// 252 = 0xfc
}
@property(copy, nonatomic) NSString *domain;	// G=0x2135d; S=0x23215; @synthesize
@property(copy, nonatomic) NSString *serviceType;	// G=0x2134d; S=0x23239; @synthesize
@property(assign, nonatomic) unsigned maxPeers;	// G=0x2132d; S=0x2133d; @synthesize
@property(assign) id<GKSessionDelegate> delegate;	// G=0x2131d; S=0x28d55; @synthesize=_delegate
@property(assign, nonatomic) OpaqueGCKSession *sessionRef;	// G=0x212fd; S=0x2130d; @synthesize
@property(assign, nonatomic) OpaqueAGPSession *agpSessionRef;	// G=0x212dd; S=0x212ed; @synthesize
@property(assign, nonatomic) unsigned port;	// G=0x212bd; S=0x212cd; @synthesize=_port
@property(assign, nonatomic) id dataReceiveHandler;	// G=0x2129d; S=0x212ad; @synthesize=_dataReceiveHandler
@property(assign) id<GKSessionPrivateDelegate> privateDelegate;	// G=0x2128d; S=0x28d21; @synthesize=_privateDelegate
@property(readonly, assign) NSString *sessionID;	// G=0x2127d; @synthesize
@property(readonly, assign) int sessionMode;	// G=0x2126d; @synthesize=_mode
@property(readonly, retain) GKConnection *connection;	// G=0x2325d; @synthesize=_connection
@property(assign) BOOL wifiEnabled;	// G=0x21235; S=0x25a19; 
@property(assign, getter=isBusy) BOOL busy;	// G=0x21225; S=0x25a3d; 
@property(assign, getter=isAvailable) BOOL available;	// G=0x21215; S=0x25c35; 
@property(assign) double disconnectTimeout;	// G=0x21245; S=0x259e5; 
@property(readonly, assign) NSString *peerID;	// G=0x22221; 
@property(readonly, assign) NSString *displayName;	// G=0x21ff5; 
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x28d55
// declared property setter: - (void)setPrivateDelegate:(id)delegate;	// 0x28d21
- (id)description;	// 0x28ca1
- (id)initWithConnection:(id)connection session:(id)session delegate:(id)delegate;	// 0x28825
- (id)initWithSessionID:(id)sessionID displayName:(id)name session:(id)session sessionMode:(int)mode;	// 0x28061
- (void)reset;	// 0x27c41
- (void)dealloc;	// 0x27a25
// declared property getter: - (id)displayName;	// 0x21ff5
- (id)displayNameForPeer:(id)peer;	// 0x278a9
- (BOOL)sendAudioData:(id)data toPeers:(id)peers withDataMode:(int)dataMode error:(id *)error;	// 0x2202d
- (BOOL)passesSendDataSanityCheck:(id)check toPeers:(id)peers withDataMode:(int)dataMode error:(id *)error;	// 0x2205d
- (BOOL)sendData:(id)data toPeers:(id)peers withDataMode:(int)dataMode error:(id *)error;	// 0x22129
- (BOOL)sendData:(id)data toPeers:(id)peers withDataMode:(int)dataMode isAudio:(BOOL)audio error:(id *)error;	// 0x27565
- (BOOL)sendDataToAllPeers:(id)allPeers withDataMode:(int)dataMode error:(id *)error;	// 0x273ad
- (void)receiveDOOB:(id)doob fromPeer:(id)peer inSession:(id)session context:(void *)context;	// 0x272cd
- (void)setDOOBReceiveHandler:(id)handler withContext:(void *)context inBand:(unsigned)band;	// 0x27011
- (void)setDataReceiveHandler:(id)handler withContext:(void *)context;	// 0x26e79
- (void)timeoutConnectToPeer:(id)peer;	// 0x26af9
- (void)connectToPeer:(id)peer withTimeout:(double)timeout;	// 0x26749
- (void)cancelConnectToPeer:(id)peer;	// 0x26631
- (BOOL)acceptConnectionFromPeer:(id)peer error:(id *)error;	// 0x26515
- (void)denyConnectionFromPeer:(id)peer;	// 0x2646d
- (void)disconnectPeerFromAllPeers:(id)allPeers;	// 0x26281
- (void)disconnectFromAllPeers;	// 0x261fd
// declared property setter: - (void)setAvailable:(BOOL)available;	// 0x25c35
// declared property getter: - (BOOL)isAvailable;	// 0x21215
- (id)peersWithConnectionState:(int)connectionState;	// 0x22159
// declared property getter: - (id)peerID;	// 0x22221
// declared property getter: - (BOOL)isBusy;	// 0x21225
- (void)stopOldService;	// 0x25bcd
// declared property setter: - (void)setBusy:(BOOL)busy;	// 0x25a3d
// declared property getter: - (BOOL)wifiEnabled;	// 0x21235
// declared property setter: - (void)setWifiEnabled:(BOOL)enabled;	// 0x25a19
- (BOOL)isPeerBusy:(id)busy;	// 0x2225d
// declared property setter: - (void)setDisconnectTimeout:(double)timeout;	// 0x259e5
// declared property getter: - (double)disconnectTimeout;	// 0x21245
- (void)handleEvents;	// 0x25595
- (BOOL)checkDNSConnection;	// 0x25459
- (void)publish;	// 0x250e1
- (BOOL)filterService:(const char *)service withPID:(unsigned)pid;	// 0x25085
- (void)cleanupExAvailablePeers;	// 0x24dc1
- (void)processTXTRecordForPeer:(id)peer txtLen:(unsigned short)len txtRecord:(const void *)record;	// 0x24be5
- (void)didUpdateTXTRecordForPeer:(id)peer fromIF:(const char *)anIf txtLen:(unsigned short)len txtRecord:(const void *)record withError:(int)error moreComing:(BOOL)coming;	// 0x24b01
- (void)didFindService:(const char *)service fromIF:(const char *)anIf withError:(int)error moreComing:(BOOL)coming;	// 0x245bd
- (void)didRemoveService:(const char *)service fromIF:(const char *)anIf withError:(int)error moreComing:(BOOL)coming;	// 0x24221
- (void)browse;	// 0x23d95
- (BOOL)tryConnectToPeer:(id)peer;	// 0x23655
- (void)didLookupHostname:(DNSServiceRef_tRef)hostname forPeer:(id)peer hostName:(const char *)name address:(const sockaddr_in *)address interface:(unsigned)interface withError:(int)error moreComing:(BOOL)coming;	// 0x23535
- (void)didResolveService:(DNSServiceRef_tRef)service forPeer:(id)peer hostName:(const char *)name port:(unsigned short)port interface:(unsigned)interface txtLen:(unsigned short)len txtRecord:(const void *)record withError:(int)error moreComing:(BOOL)coming;	// 0x23275
- (id)stringForGCKID:(unsigned)gckid;	// 0x222b9
- (id)voiceChatSessionListener;	// 0x2125d
// declared property getter: - (id)connection;	// 0x2325d
// declared property getter: - (int)sessionMode;	// 0x2126d
// declared property getter: - (id)sessionID;	// 0x2127d
// declared property getter: - (id)privateDelegate;	// 0x2128d
// declared property getter: - (id)dataReceiveHandler;	// 0x2129d
// declared property setter: - (void)setDataReceiveHandler:(id)handler;	// 0x212ad
// declared property getter: - (unsigned)port;	// 0x212bd
// declared property setter: - (void)setPort:(unsigned)port;	// 0x212cd
// declared property getter: - (OpaqueAGPSession *)agpSessionRef;	// 0x212dd
// declared property setter: - (void)setAgpSessionRef:(OpaqueAGPSession *)ref;	// 0x212ed
// declared property getter: - (OpaqueGCKSession *)sessionRef;	// 0x212fd
// declared property setter: - (void)setSessionRef:(OpaqueGCKSession *)ref;	// 0x2130d
// declared property getter: - (id)delegate;	// 0x2131d
// declared property getter: - (unsigned)maxPeers;	// 0x2132d
// declared property setter: - (void)setMaxPeers:(unsigned)peers;	// 0x2133d
// declared property getter: - (id)serviceType;	// 0x2134d
// declared property setter: - (void)setServiceType:(id)type;	// 0x23239
// declared property getter: - (id)domain;	// 0x2135d
// declared property setter: - (void)setDomain:(id)domain;	// 0x23215
@end

@interface GKSessionInternal (callback)
- (void)sendCallbacksToDelegate:(XXStruct_jB8chB *)delegate remotePeer:(unsigned)peer;	// 0x2c20d
@end

@interface GKSessionInternal (_private)
- (BOOL)isShuttingDown;	// 0x211c1
- (id)createNSErrorFromHRESULT:(long)hresult description:(id)description reason:(id)reason;	// 0x29021
- (id)createNSErrorFromGKSessionError:(int)gksessionError description:(id)description reason:(id)reason;	// 0x29129
- (void)printDictionaries;	// 0x211d1
- (void)setDisplayName:(id)name forPeer:(unsigned)peer;	// 0x29231
- (void)tellDelegate_sessionDidFailWithError:(id)tellDelegate_session;	// 0x2a209
- (void)tellDelegate_didConnectPeer:(id)peer;	// 0x2a521
- (void)tellDelegate_didDisconnectPeer:(id)peer;	// 0x2a8a5
- (void)tellDelegate_isConnectingPeer:(id)peer;	// 0x2ab75
- (void)tellDelegate_peerDidBecomeAvailable:(id)tellDelegate_peer;	// 0x2ad79
- (void)tellDelegate_peerDidBecomeUnavailable:(id)tellDelegate_peer;	// 0x2af0d
- (void)tellDelegate_didReceiveBand_RetryICE:(id)ice;	// 0x2a2b5
- (void)tellDelegate_didReceiveData:(id)data;	// 0x2a3d1
- (void)tellDelegate_gotInvited:(id)invited;	// 0x2b0a1
- (void)tellDelegate_connectionRequestToPeerFailed:(id)peerFailed;	// 0x2b261
- (void)tellDelegate_peerDidBecomeBusy:(id)tellDelegate_peer;	// 0x2b465
- (void)tellDelegate_initiateRelay:(id)relay;	// 0x2b5a9
- (void)tellDelegate_updateRelay:(id)relay;	// 0x2b7d1
- (void)tellDelegate_networkStatisticsChanged:(id)changed;	// 0x2b9f9
- (BOOL)parseServiceName:(const char *)name intoDisplayName:(id *)name2 pid:(unsigned *)pid state:(id *)state;	// 0x2bba9
- (id)serviceName;	// 0x21d8d
- (void)stopResolvingAllPeers;	// 0x2bec9
- (void)didPublishWithError:(int)error;	// 0x2bf61
- (void)lock;	// 0x2a1b9
- (void)unlock;	// 0x2a381
@end
